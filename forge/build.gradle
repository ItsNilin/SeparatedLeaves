plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "separatedleaves-common.mixins.json"
        mixinConfig "separatedleaves.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "separated-leaves"
    versionNumber = "${rootProject.mod_version}-forge-${rootProject.latest_version}"
    versionName = "${rootProject.mod_version} Forge ${rootProject.latest_version}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ["1.19.3", "1.19.4", "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4"]
    loaders = ["forge"]
    dependencies {
        required.project "architectury-api"
        optional.project "biomesyougo"
        optional.project "ecologics"
        optional.project "hex-casting"
        optional.project "premium-wood"
        optional.project "quark"
        optional.project "regions-unexplored"
    }
    changelog = rootProject.file("CHANGELOG_LATEST.md").text

    syncBodyFrom = rootProject.file("README.md").text
    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "905482"
        changelog = rootProject.file("CHANGELOG_LATEST.md").text
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion "1.19.3"
        addGameVersion "1.19.4"
        addGameVersion "1.20"
        addGameVersion "1.20.1"
        addGameVersion "1.20.2"
        addGameVersion "1.20.3"
        addGameVersion "1.20.4"
        addGameVersion "Forge"

        relations {
            requiredDependency "architectury-api"
            optionalDependency "atmospheric"
            optionalDependency "autumnity"
            optionalDependency "biomes-o-plenty"
            optionalDependency "ecologics"
            optionalDependency "environmental"
            optionalDependency "hexcasting"
            optionalDependency "malum"
            optionalDependency "oh-the-biomes-youll-go"
            optionalDependency "premium-wood"
            optionalDependency "quark"
            optionalDependency "regions-unexplored"
            optionalDependency "upgrade-aquatic"
            optionalDependency "windsweptmod"
        }
        mainArtifact(remapJar) {
            displayName = "${rootProject.mod_version} Forge ${rootProject.latest_version}"
        }
        options {
            javaVersionAutoDetect = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge-${rootProject.latest_version}"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
